!function () { var e; class t extends HTMLElement { connectedCallback() { const e = this.parentNode; e.parentNode?.removeChild(e), e.childNodes.forEach((e => { if (e instanceof HTMLTemplateElement) { const t = e.getAttribute("blazor-component-id"); t && function (e, t) { const o = function (e) { const t = `bl:${e}`, n = document.createNodeIterator(document, NodeFilter.SHOW_COMMENT); let o = null; for (; (o = n.nextNode()) && o.textContent !== t;); if (!o) return null; const r = `/bl:${e}`; let i = null; for (; (i = n.nextNode()) && i.textContent !== r;); return i ? { startMarker: o, endMarker: i } : null }(e); if (o) { const { startMarker: e, endMarker: r } = o; n(e, r, t) } }(t, e.content) } })), htmx?.process(document.body) } } function n(t, n, r) { var i = function (e, t, n) { var o = document.createElement("div"); o.id = n; var r = e.nextSibling; for (; r && r !== t;)o.appendChild(r), r = e.nextSibling; return e.parentNode.insertBefore(o, e), e.parentNode.removeChild(e), t.parentNode.removeChild(t), o }(t, n, crypto.randomUUID()), l = document.createElement("div"); l.appendChild(r), function (t, n) { e.withExtensions(t, (function (e) { n = e.transformResponse(n, null, t) })); var r = e.getSwapSpecification(t), i = e.getTarget(t), l = e.makeSettleInfo(t); e.selectAndSwap(r.swapStyle, i, t, n, l), l.elts.forEach((function (t) { t.classList && t.classList.add(htmx.config.settlingClass), e.triggerEvent(t, "htmx:beforeSettle") })), r.settleDelay > 0 ? setTimeout(o(l), r.settleDelay) : o(l)() }(i, l.innerHTML), function (e) { if (e.parentNode) { for (; e.firstChild;)e.parentNode.insertBefore(e.firstChild, e); e.parentNode.removeChild(e) } }(i) } function o(t) { return function () { t.tasks.forEach((function (e) { e.call() })), t.elts.forEach((function (t) { t.classList && t.classList.remove(htmx.config.settlingClass), e.triggerEvent(t, "htmx:afterSettle") })) } } htmx.defineExtension("blazor", { init: function (o) { e = o, null == htmx.blazorSwapSsr && (htmx.blazorSwapSsr = n, customElements.define("blazor-ssr-end", t)) } }) }();